<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
  
  <context:annotation-config />
    
   <!-- 扫描注解Bean -->
  <context:component-scan base-package="demo">
<!--     <context:exclude-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" /> -->
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  </context:component-scan>


  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location">
      <value>classpath:config.properties</value>
    </property>
  </bean>

  <import resource="classpath*:/spring/mq-message.xml" />

  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
    <property name="jdbcUrl"
      value="jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull"></property>
    <property name="user" value="root"></property>
    <property name="password" value="root"></property>
    <property name="minPoolSize">
      <value>1</value>
    </property>
    <property name="maxPoolSize">
      <value>10</value>
    </property>
    <property name="maxIdleTime">
      <value>1800</value>
    </property>
    <property name="acquireIncrement">
      <value>2</value>
    </property>
    <property name="maxStatements">
      <value>0</value>
    </property>
    <property name="initialPoolSize">
      <value>2</value>
    </property>
    <property name="idleConnectionTestPeriod">
      <value>1800</value>
    </property>
    <property name="acquireRetryAttempts">
      <value>120</value>
    </property>
    <property name="breakAfterAcquireFailure">
      <value>true</value>
    </property>
  </bean>
  
    
      <!-- 配置mybatisSqlSessionFactoryBean -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="mapperLocations" value="classpath:mapper/*.xml" />
    <property name="typeAliasesPackage" value="demo.domain" />
    <property name="dataSource" ref="dataSource" />
    <property name="configLocation" value="classpath:mybatis.xml"></property>
  </bean>

  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="demo.mapper"></property>
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
  </bean>

  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <!--配置事务处理策略，transaction-manager属性指定事务管理器。 若事务管理器bean的id即为transactionManager，则 
    transaction-manager的属性可以不指定 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <!--所有以find开头的方法都是只读的 -->
      <tx:method name="get*" read-only="true" />
      <tx:method name="find*" read-only="true" />
      <tx:method name="save*" />
      <!--其他方法使用默认事务策略 -->
      <tx:method name="*" />
    </tx:attributes>
  </tx:advice>

  <!-- AOP配置 -->
  <aop:config>
    <!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型，这里星号表明匹配所有返回类型。 com.abc.dao.*.*(..)表明匹配com.abc.dao包下的所有类的所有 
      方法 -->
    <aop:pointcut id="myPointcut" expression="execution(* demo.mapper.*.*(..))" />
    <!--将定义好的事务处理策略应用到上述的切入点 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
  </aop:config>

<!--   <bean id="maintenanceCodeAdvice" class="demo.common.bean.MaintenanceCodeAdvice" /> -->
<!--   <aop:config proxy-target-class="true"> -->
<!--     <aop:pointcut id="maintenanceCodePoint" expression="@annotation(demo.common.annotation.MaintenanceCode)" /> -->
<!--     <aop:advisor pointcut-ref="maintenanceCodePoint" advice-ref="maintenanceCodeAdvice" /> -->
<!--   </aop:config> -->
 
<!--  <bean id="aspectDemo" class="demo.service.AspectDemo"></bean> -->
<!--   <aop:config> -->
<!--     <aop:pointcut  expression="execution (* demo..*.*(..))" id="pointcut1"/> -->
<!--     <aop:aspect  ref="aspectDemo"> -->
<!--       <aop:around method="log" pointcut-ref="pointcut1"/> -->
<!--     </aop:aspect> -->
<!--   </aop:config> -->

  <bean id="flightService" class="demo.service.impl.FlightServiceImpl"></bean>

</beans>